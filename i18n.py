#! /usr/bin/python2
"""tiny localization util. (c) makapuf

GPLv3 license.

inputs : filename.ext lang1 (language to produce, by example fr). 

reads filename.ext and translate_<lang1>.po
outputs : filename_lang1.ext + updates translate_<lang1>.po

Workflows : 
    write src.c -> i18n.py -> edit .po -> i18n.py -> compile src_fr.c 
    edit  src.c -> i18n.py -> edit .po -> i18n.py -> compile src_fr.c  
    write src2.c-> i18n.py -> edit .po -> i18n.py -> compile src2_fr.c  

example makefile rules : 
    source_%.c trans_% : source.c
        i18n.py source.c %


FIXME : 
    cannot parse multiline C strings or split strings yet. 

"""

import sys, re, os

# filenames
in_file, lang = sys.argv[1:]
sp = os.path.splitext(in_file)
out_file = sp[0]+'_'+lang+sp[1]
str_file = 'trans_%s.po'%lang

# regexes
str_trad = re.compile(r'_\s*\(\s*"((?:[^"\\]|\\.)*)"\s*\)') # regexp match escaped quotes

# read existing string file
strings = {} # src : ref, translation, comment
try : 
    with open(str_file) as strf : 
        cmt=ref=''
        while (True) : 
            l=strf.next().strip()
            if not l : continue

            if l.startswith('#') : 
                if l.startswith ('# ') : cmt=l[2:]
                if l.startswith ('#:') : ref=l[3:]
                # rest : ignore

            else : 
                if not l.startswith('msgid "') : 
                    print "Error - expected msgid near :",l
                    exit(1)

                src = l[7:-1]
                while True : 
                    l = next(strf).strip()
                    if l.startswith("msgstr ") : break
                    else : src += l[1:-1]

                trans = l[8:-1]
                while True : 
                    l = next(strf).strip()
                    if not l.startswith('"') : break
                    else : trans += l[1:-1]

                if src in strings : 
                    print 'Error : duplicate msgid found for: "%s"'%src
                    exit(1)
                strings[src] = (ref, trans, cmt)
                cmt=ref=""

except StopIteration : 
    strings[src] = (ref, trans, cmt)

except IOError,e :  
    print "Cannot open file %s, will try to create it."%str_file

added = 0
# write  source file and output 
with open(out_file,'w') as outf : 
    for i,l in enumerate(open(in_file)) : 
        for m in str_trad.finditer(l) : 
            src=m.group(1)

            if src not in strings: 
                ref = "%s %04d"%(in_file, i)
                strings[src] = (ref,'','')
                added += 1

            trad = strings[src][1]
            l = l.replace(src,trad)
        outf.write(l)
        # FIXME replace all occurences within a line. Also match multilines !

# now re-outputs strings file (sorted)
with open(str_file,'w') as strf : 
    print >>strf,"#- Translation to %s file generated by i18n.py script\n"%lang
    for src in sorted(strings, key = lambda k : strings[k][0]) : 
        ref, trad, cmt = strings[src]
        if ref: print >>strf, '#: %s'%ref
        if cmt : print >>strf, '# %s'%cmt
        print >>strf, 'msgid "%s"'%src
        print >>strf, 'msgstr "%s"'%trad
        print >>strf

    print "%d translations written to %s (%d new)."%(len(strings), str_file, added)

